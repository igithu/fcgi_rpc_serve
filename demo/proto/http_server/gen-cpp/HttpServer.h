/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef HttpServer_H
#define HttpServer_H

#include <thrift/TDispatchProcessor.h>
#include "http_server_types.h"



class HttpServerIf {
 public:
  virtual ~HttpServerIf() {}
  virtual void add(std::string& _return, const std::string& request_str) = 0;
  virtual void sub(std::string& _return, const std::string& request_str) = 0;
};

class HttpServerIfFactory {
 public:
  typedef HttpServerIf Handler;

  virtual ~HttpServerIfFactory() {}

  virtual HttpServerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(HttpServerIf* /* handler */) = 0;
};

class HttpServerIfSingletonFactory : virtual public HttpServerIfFactory {
 public:
  HttpServerIfSingletonFactory(const boost::shared_ptr<HttpServerIf>& iface) : iface_(iface) {}
  virtual ~HttpServerIfSingletonFactory() {}

  virtual HttpServerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(HttpServerIf* /* handler */) {}

 protected:
  boost::shared_ptr<HttpServerIf> iface_;
};

class HttpServerNull : virtual public HttpServerIf {
 public:
  virtual ~HttpServerNull() {}
  void add(std::string& /* _return */, const std::string& /* request_str */) {
    return;
  }
  void sub(std::string& /* _return */, const std::string& /* request_str */) {
    return;
  }
};

typedef struct _HttpServer_add_args__isset {
  _HttpServer_add_args__isset() : request_str(false) {}
  bool request_str;
} _HttpServer_add_args__isset;

class HttpServer_add_args {
 public:

  HttpServer_add_args() : request_str() {
  }

  virtual ~HttpServer_add_args() throw() {}

  std::string request_str;

  _HttpServer_add_args__isset __isset;

  void __set_request_str(const std::string& val) {
    request_str = val;
  }

  bool operator == (const HttpServer_add_args & rhs) const
  {
    if (!(request_str == rhs.request_str))
      return false;
    return true;
  }
  bool operator != (const HttpServer_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HttpServer_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HttpServer_add_pargs {
 public:


  virtual ~HttpServer_add_pargs() throw() {}

  const std::string* request_str;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HttpServer_add_result__isset {
  _HttpServer_add_result__isset() : success(false) {}
  bool success;
} _HttpServer_add_result__isset;

class HttpServer_add_result {
 public:

  HttpServer_add_result() : success() {
  }

  virtual ~HttpServer_add_result() throw() {}

  std::string success;

  _HttpServer_add_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const HttpServer_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HttpServer_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HttpServer_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HttpServer_add_presult__isset {
  _HttpServer_add_presult__isset() : success(false) {}
  bool success;
} _HttpServer_add_presult__isset;

class HttpServer_add_presult {
 public:


  virtual ~HttpServer_add_presult() throw() {}

  std::string* success;

  _HttpServer_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HttpServer_sub_args__isset {
  _HttpServer_sub_args__isset() : request_str(false) {}
  bool request_str;
} _HttpServer_sub_args__isset;

class HttpServer_sub_args {
 public:

  HttpServer_sub_args() : request_str() {
  }

  virtual ~HttpServer_sub_args() throw() {}

  std::string request_str;

  _HttpServer_sub_args__isset __isset;

  void __set_request_str(const std::string& val) {
    request_str = val;
  }

  bool operator == (const HttpServer_sub_args & rhs) const
  {
    if (!(request_str == rhs.request_str))
      return false;
    return true;
  }
  bool operator != (const HttpServer_sub_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HttpServer_sub_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HttpServer_sub_pargs {
 public:


  virtual ~HttpServer_sub_pargs() throw() {}

  const std::string* request_str;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HttpServer_sub_result__isset {
  _HttpServer_sub_result__isset() : success(false) {}
  bool success;
} _HttpServer_sub_result__isset;

class HttpServer_sub_result {
 public:

  HttpServer_sub_result() : success() {
  }

  virtual ~HttpServer_sub_result() throw() {}

  std::string success;

  _HttpServer_sub_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const HttpServer_sub_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HttpServer_sub_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HttpServer_sub_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HttpServer_sub_presult__isset {
  _HttpServer_sub_presult__isset() : success(false) {}
  bool success;
} _HttpServer_sub_presult__isset;

class HttpServer_sub_presult {
 public:


  virtual ~HttpServer_sub_presult() throw() {}

  std::string* success;

  _HttpServer_sub_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class HttpServerClient : virtual public HttpServerIf {
 public:
  HttpServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  HttpServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void add(std::string& _return, const std::string& request_str);
  void send_add(const std::string& request_str);
  void recv_add(std::string& _return);
  void sub(std::string& _return, const std::string& request_str);
  void send_sub(const std::string& request_str);
  void recv_sub(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class HttpServerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<HttpServerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (HttpServerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sub(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  HttpServerProcessor(boost::shared_ptr<HttpServerIf> iface) :
    iface_(iface) {
    processMap_["add"] = &HttpServerProcessor::process_add;
    processMap_["sub"] = &HttpServerProcessor::process_sub;
  }

  virtual ~HttpServerProcessor() {}
};

class HttpServerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  HttpServerProcessorFactory(const ::boost::shared_ptr< HttpServerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< HttpServerIfFactory > handlerFactory_;
};

class HttpServerMultiface : virtual public HttpServerIf {
 public:
  HttpServerMultiface(std::vector<boost::shared_ptr<HttpServerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~HttpServerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<HttpServerIf> > ifaces_;
  HttpServerMultiface() {}
  void add(boost::shared_ptr<HttpServerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void add(std::string& _return, const std::string& request_str) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(_return, request_str);
    }
    ifaces_[i]->add(_return, request_str);
    return;
  }

  void sub(std::string& _return, const std::string& request_str) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sub(_return, request_str);
    }
    ifaces_[i]->sub(_return, request_str);
    return;
  }

};



#endif
