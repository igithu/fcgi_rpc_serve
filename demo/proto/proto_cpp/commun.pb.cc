// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "commun.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fcgi_commu {

namespace {

const ::google::protobuf::Descriptor* FcgiHttpRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FcgiHttpRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FcgiHttpResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FcgiHttpResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Op_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_commun_2eproto() {
  protobuf_AddDesc_commun_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "commun.proto");
  GOOGLE_CHECK(file != NULL);
  FcgiHttpRequest_descriptor_ = file->message_type(0);
  static const int FcgiHttpRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FcgiHttpRequest, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FcgiHttpRequest, param_one_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FcgiHttpRequest, param_two_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FcgiHttpRequest, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FcgiHttpRequest, fmt_),
  };
  FcgiHttpRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FcgiHttpRequest_descriptor_,
      FcgiHttpRequest::default_instance_,
      FcgiHttpRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FcgiHttpRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FcgiHttpRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FcgiHttpRequest));
  FcgiHttpResponse_descriptor_ = file->message_type(1);
  static const int FcgiHttpResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FcgiHttpResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FcgiHttpResponse, cal_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FcgiHttpResponse, ip_),
  };
  FcgiHttpResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FcgiHttpResponse_descriptor_,
      FcgiHttpResponse::default_instance_,
      FcgiHttpResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FcgiHttpResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FcgiHttpResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FcgiHttpResponse));
  Op_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_commun_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FcgiHttpRequest_descriptor_, &FcgiHttpRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FcgiHttpResponse_descriptor_, &FcgiHttpResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_commun_2eproto() {
  delete FcgiHttpRequest::default_instance_;
  delete FcgiHttpRequest_reflection_;
  delete FcgiHttpResponse::default_instance_;
  delete FcgiHttpResponse_reflection_;
}

void protobuf_AddDesc_commun_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014commun.proto\022\nfcgi_commu\"m\n\017FcgiHttpRe"
    "quest\022\r\n\002op\030\001 \001(\t:\001+\022\024\n\tparam_one\030\002 \001(\005:"
    "\0010\022\024\n\tparam_two\030\003 \001(\005:\0010\022\014\n\002ip\030\004 \001(\t:\000\022\021"
    "\n\003fmt\030\005 \001(\t:\004json\"H\n\020FcgiHttpResponse\022\021\n"
    "\006result\030\001 \001(\005:\0010\022\023\n\010cal_time\030\002 \001(\003:\0010\022\014\n"
    "\002ip\030\003 \001(\t:\000*\026\n\002Op\022\007\n\003SUB\020\000\022\007\n\003ADD\020\001", 235);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "commun.proto", &protobuf_RegisterTypes);
  FcgiHttpRequest::default_instance_ = new FcgiHttpRequest();
  FcgiHttpResponse::default_instance_ = new FcgiHttpResponse();
  FcgiHttpRequest::default_instance_->InitAsDefaultInstance();
  FcgiHttpResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_commun_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_commun_2eproto {
  StaticDescriptorInitializer_commun_2eproto() {
    protobuf_AddDesc_commun_2eproto();
  }
} static_descriptor_initializer_commun_2eproto_;

const ::google::protobuf::EnumDescriptor* Op_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Op_descriptor_;
}
bool Op_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::std::string FcgiHttpRequest::_default_op_("+");
const ::std::string FcgiHttpRequest::_default_fmt_("json");
#ifndef _MSC_VER
const int FcgiHttpRequest::kOpFieldNumber;
const int FcgiHttpRequest::kParamOneFieldNumber;
const int FcgiHttpRequest::kParamTwoFieldNumber;
const int FcgiHttpRequest::kIpFieldNumber;
const int FcgiHttpRequest::kFmtFieldNumber;
#endif  // !_MSC_VER

FcgiHttpRequest::FcgiHttpRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FcgiHttpRequest::InitAsDefaultInstance() {
}

FcgiHttpRequest::FcgiHttpRequest(const FcgiHttpRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FcgiHttpRequest::SharedCtor() {
  _cached_size_ = 0;
  op_ = const_cast< ::std::string*>(&_default_op_);
  param_one_ = 0;
  param_two_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fmt_ = const_cast< ::std::string*>(&_default_fmt_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FcgiHttpRequest::~FcgiHttpRequest() {
  SharedDtor();
}

void FcgiHttpRequest::SharedDtor() {
  if (op_ != &_default_op_) {
    delete op_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (fmt_ != &_default_fmt_) {
    delete fmt_;
  }
  if (this != default_instance_) {
  }
}

void FcgiHttpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FcgiHttpRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FcgiHttpRequest_descriptor_;
}

const FcgiHttpRequest& FcgiHttpRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commun_2eproto();  return *default_instance_;
}

FcgiHttpRequest* FcgiHttpRequest::default_instance_ = NULL;

FcgiHttpRequest* FcgiHttpRequest::New() const {
  return new FcgiHttpRequest;
}

void FcgiHttpRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_op()) {
      if (op_ != &_default_op_) {
        op_->assign(_default_op_);
      }
    }
    param_one_ = 0;
    param_two_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_fmt()) {
      if (fmt_ != &_default_fmt_) {
        fmt_->assign(_default_fmt_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FcgiHttpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string op = 1 [default = "+"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_op()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->op().data(), this->op().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_param_one;
        break;
      }
      
      // optional int32 param_one = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param_one:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_one_)));
          set_has_param_one();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_param_two;
        break;
      }
      
      // optional int32 param_two = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param_two:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_two_)));
          set_has_param_two();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }
      
      // optional string ip = 4 [default = ""];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_fmt;
        break;
      }
      
      // optional string fmt = 5 [default = "json"];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fmt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fmt().data(), this->fmt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FcgiHttpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string op = 1 [default = "+"];
  if (has_op()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->op().data(), this->op().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->op(), output);
  }
  
  // optional int32 param_one = 2 [default = 0];
  if (has_param_one()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->param_one(), output);
  }
  
  // optional int32 param_two = 3 [default = 0];
  if (has_param_two()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->param_two(), output);
  }
  
  // optional string ip = 4 [default = ""];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip(), output);
  }
  
  // optional string fmt = 5 [default = "json"];
  if (has_fmt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fmt().data(), this->fmt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->fmt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FcgiHttpRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string op = 1 [default = "+"];
  if (has_op()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->op().data(), this->op().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->op(), target);
  }
  
  // optional int32 param_one = 2 [default = 0];
  if (has_param_one()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->param_one(), target);
  }
  
  // optional int32 param_two = 3 [default = 0];
  if (has_param_two()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->param_two(), target);
  }
  
  // optional string ip = 4 [default = ""];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }
  
  // optional string fmt = 5 [default = "json"];
  if (has_fmt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fmt().data(), this->fmt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->fmt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FcgiHttpRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string op = 1 [default = "+"];
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->op());
    }
    
    // optional int32 param_one = 2 [default = 0];
    if (has_param_one()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param_one());
    }
    
    // optional int32 param_two = 3 [default = 0];
    if (has_param_two()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param_two());
    }
    
    // optional string ip = 4 [default = ""];
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional string fmt = 5 [default = "json"];
    if (has_fmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fmt());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FcgiHttpRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FcgiHttpRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FcgiHttpRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FcgiHttpRequest::MergeFrom(const FcgiHttpRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_param_one()) {
      set_param_one(from.param_one());
    }
    if (from.has_param_two()) {
      set_param_two(from.param_two());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_fmt()) {
      set_fmt(from.fmt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FcgiHttpRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FcgiHttpRequest::CopyFrom(const FcgiHttpRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FcgiHttpRequest::IsInitialized() const {
  
  return true;
}

void FcgiHttpRequest::Swap(FcgiHttpRequest* other) {
  if (other != this) {
    std::swap(op_, other->op_);
    std::swap(param_one_, other->param_one_);
    std::swap(param_two_, other->param_two_);
    std::swap(ip_, other->ip_);
    std::swap(fmt_, other->fmt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FcgiHttpRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FcgiHttpRequest_descriptor_;
  metadata.reflection = FcgiHttpRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FcgiHttpResponse::kResultFieldNumber;
const int FcgiHttpResponse::kCalTimeFieldNumber;
const int FcgiHttpResponse::kIpFieldNumber;
#endif  // !_MSC_VER

FcgiHttpResponse::FcgiHttpResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FcgiHttpResponse::InitAsDefaultInstance() {
}

FcgiHttpResponse::FcgiHttpResponse(const FcgiHttpResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FcgiHttpResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  cal_time_ = GOOGLE_LONGLONG(0);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FcgiHttpResponse::~FcgiHttpResponse() {
  SharedDtor();
}

void FcgiHttpResponse::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void FcgiHttpResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FcgiHttpResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FcgiHttpResponse_descriptor_;
}

const FcgiHttpResponse& FcgiHttpResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commun_2eproto();  return *default_instance_;
}

FcgiHttpResponse* FcgiHttpResponse::default_instance_ = NULL;

FcgiHttpResponse* FcgiHttpResponse::New() const {
  return new FcgiHttpResponse;
}

void FcgiHttpResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    cal_time_ = GOOGLE_LONGLONG(0);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FcgiHttpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cal_time;
        break;
      }
      
      // optional int64 cal_time = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cal_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cal_time_)));
          set_has_cal_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }
      
      // optional string ip = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FcgiHttpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1 [default = 0];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }
  
  // optional int64 cal_time = 2 [default = 0];
  if (has_cal_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cal_time(), output);
  }
  
  // optional string ip = 3 [default = ""];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FcgiHttpResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1 [default = 0];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }
  
  // optional int64 cal_time = 2 [default = 0];
  if (has_cal_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->cal_time(), target);
  }
  
  // optional string ip = 3 [default = ""];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FcgiHttpResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1 [default = 0];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional int64 cal_time = 2 [default = 0];
    if (has_cal_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cal_time());
    }
    
    // optional string ip = 3 [default = ""];
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FcgiHttpResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FcgiHttpResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FcgiHttpResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FcgiHttpResponse::MergeFrom(const FcgiHttpResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_cal_time()) {
      set_cal_time(from.cal_time());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FcgiHttpResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FcgiHttpResponse::CopyFrom(const FcgiHttpResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FcgiHttpResponse::IsInitialized() const {
  
  return true;
}

void FcgiHttpResponse::Swap(FcgiHttpResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(cal_time_, other->cal_time_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FcgiHttpResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FcgiHttpResponse_descriptor_;
  metadata.reflection = FcgiHttpResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fcgi_commu

// @@protoc_insertion_point(global_scope)
