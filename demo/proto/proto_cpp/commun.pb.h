// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commun.proto

#ifndef PROTOBUF_commun_2eproto__INCLUDED
#define PROTOBUF_commun_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace fcgi_commu {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_commun_2eproto();
void protobuf_AssignDesc_commun_2eproto();
void protobuf_ShutdownFile_commun_2eproto();

class FcgiHttpRequest;
class FcgiHttpResponse;

enum Op {
  SUB = 0,
  ADD = 1
};
bool Op_IsValid(int value);
const Op Op_MIN = SUB;
const Op Op_MAX = ADD;
const int Op_ARRAYSIZE = Op_MAX + 1;

const ::google::protobuf::EnumDescriptor* Op_descriptor();
inline const ::std::string& Op_Name(Op value) {
  return ::google::protobuf::internal::NameOfEnum(
    Op_descriptor(), value);
}
inline bool Op_Parse(
    const ::std::string& name, Op* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Op>(
    Op_descriptor(), name, value);
}
// ===================================================================

class FcgiHttpRequest : public ::google::protobuf::Message {
 public:
  FcgiHttpRequest();
  virtual ~FcgiHttpRequest();
  
  FcgiHttpRequest(const FcgiHttpRequest& from);
  
  inline FcgiHttpRequest& operator=(const FcgiHttpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FcgiHttpRequest& default_instance();
  
  void Swap(FcgiHttpRequest* other);
  
  // implements Message ----------------------------------------------
  
  FcgiHttpRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FcgiHttpRequest& from);
  void MergeFrom(const FcgiHttpRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string op = 1 [default = "+"];
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 1;
  inline const ::std::string& op() const;
  inline void set_op(const ::std::string& value);
  inline void set_op(const char* value);
  inline void set_op(const char* value, size_t size);
  inline ::std::string* mutable_op();
  inline ::std::string* release_op();
  
  // optional int32 param_one = 2 [default = 0];
  inline bool has_param_one() const;
  inline void clear_param_one();
  static const int kParamOneFieldNumber = 2;
  inline ::google::protobuf::int32 param_one() const;
  inline void set_param_one(::google::protobuf::int32 value);
  
  // optional int32 param_two = 3 [default = 0];
  inline bool has_param_two() const;
  inline void clear_param_two();
  static const int kParamTwoFieldNumber = 3;
  inline ::google::protobuf::int32 param_two() const;
  inline void set_param_two(::google::protobuf::int32 value);
  
  // optional string ip = 4 [default = ""];
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 4;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  
  // optional string fmt = 5 [default = "json"];
  inline bool has_fmt() const;
  inline void clear_fmt();
  static const int kFmtFieldNumber = 5;
  inline const ::std::string& fmt() const;
  inline void set_fmt(const ::std::string& value);
  inline void set_fmt(const char* value);
  inline void set_fmt(const char* value, size_t size);
  inline ::std::string* mutable_fmt();
  inline ::std::string* release_fmt();
  
  // @@protoc_insertion_point(class_scope:fcgi_commu.FcgiHttpRequest)
 private:
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_param_one();
  inline void clear_has_param_one();
  inline void set_has_param_two();
  inline void clear_has_param_two();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_fmt();
  inline void clear_has_fmt();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* op_;
  static const ::std::string _default_op_;
  ::google::protobuf::int32 param_one_;
  ::google::protobuf::int32 param_two_;
  ::std::string* ip_;
  ::std::string* fmt_;
  static const ::std::string _default_fmt_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_commun_2eproto();
  friend void protobuf_AssignDesc_commun_2eproto();
  friend void protobuf_ShutdownFile_commun_2eproto();
  
  void InitAsDefaultInstance();
  static FcgiHttpRequest* default_instance_;
};
// -------------------------------------------------------------------

class FcgiHttpResponse : public ::google::protobuf::Message {
 public:
  FcgiHttpResponse();
  virtual ~FcgiHttpResponse();
  
  FcgiHttpResponse(const FcgiHttpResponse& from);
  
  inline FcgiHttpResponse& operator=(const FcgiHttpResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FcgiHttpResponse& default_instance();
  
  void Swap(FcgiHttpResponse* other);
  
  // implements Message ----------------------------------------------
  
  FcgiHttpResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FcgiHttpResponse& from);
  void MergeFrom(const FcgiHttpResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 result = 1 [default = 0];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // optional int64 cal_time = 2 [default = 0];
  inline bool has_cal_time() const;
  inline void clear_cal_time();
  static const int kCalTimeFieldNumber = 2;
  inline ::google::protobuf::int64 cal_time() const;
  inline void set_cal_time(::google::protobuf::int64 value);
  
  // optional string ip = 3 [default = ""];
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  
  // @@protoc_insertion_point(class_scope:fcgi_commu.FcgiHttpResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_cal_time();
  inline void clear_has_cal_time();
  inline void set_has_ip();
  inline void clear_has_ip();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 cal_time_;
  ::std::string* ip_;
  ::google::protobuf::int32 result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_commun_2eproto();
  friend void protobuf_AssignDesc_commun_2eproto();
  friend void protobuf_ShutdownFile_commun_2eproto();
  
  void InitAsDefaultInstance();
  static FcgiHttpResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// FcgiHttpRequest

// optional string op = 1 [default = "+"];
inline bool FcgiHttpRequest::has_op() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FcgiHttpRequest::set_has_op() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FcgiHttpRequest::clear_has_op() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FcgiHttpRequest::clear_op() {
  if (op_ != &_default_op_) {
    op_->assign(_default_op_);
  }
  clear_has_op();
}
inline const ::std::string& FcgiHttpRequest::op() const {
  return *op_;
}
inline void FcgiHttpRequest::set_op(const ::std::string& value) {
  set_has_op();
  if (op_ == &_default_op_) {
    op_ = new ::std::string;
  }
  op_->assign(value);
}
inline void FcgiHttpRequest::set_op(const char* value) {
  set_has_op();
  if (op_ == &_default_op_) {
    op_ = new ::std::string;
  }
  op_->assign(value);
}
inline void FcgiHttpRequest::set_op(const char* value, size_t size) {
  set_has_op();
  if (op_ == &_default_op_) {
    op_ = new ::std::string;
  }
  op_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FcgiHttpRequest::mutable_op() {
  set_has_op();
  if (op_ == &_default_op_) {
    op_ = new ::std::string(_default_op_);
  }
  return op_;
}
inline ::std::string* FcgiHttpRequest::release_op() {
  clear_has_op();
  if (op_ == &_default_op_) {
    return NULL;
  } else {
    ::std::string* temp = op_;
    op_ = const_cast< ::std::string*>(&_default_op_);
    return temp;
  }
}

// optional int32 param_one = 2 [default = 0];
inline bool FcgiHttpRequest::has_param_one() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FcgiHttpRequest::set_has_param_one() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FcgiHttpRequest::clear_has_param_one() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FcgiHttpRequest::clear_param_one() {
  param_one_ = 0;
  clear_has_param_one();
}
inline ::google::protobuf::int32 FcgiHttpRequest::param_one() const {
  return param_one_;
}
inline void FcgiHttpRequest::set_param_one(::google::protobuf::int32 value) {
  set_has_param_one();
  param_one_ = value;
}

// optional int32 param_two = 3 [default = 0];
inline bool FcgiHttpRequest::has_param_two() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FcgiHttpRequest::set_has_param_two() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FcgiHttpRequest::clear_has_param_two() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FcgiHttpRequest::clear_param_two() {
  param_two_ = 0;
  clear_has_param_two();
}
inline ::google::protobuf::int32 FcgiHttpRequest::param_two() const {
  return param_two_;
}
inline void FcgiHttpRequest::set_param_two(::google::protobuf::int32 value) {
  set_has_param_two();
  param_two_ = value;
}

// optional string ip = 4 [default = ""];
inline bool FcgiHttpRequest::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FcgiHttpRequest::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FcgiHttpRequest::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FcgiHttpRequest::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& FcgiHttpRequest::ip() const {
  return *ip_;
}
inline void FcgiHttpRequest::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void FcgiHttpRequest::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void FcgiHttpRequest::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FcgiHttpRequest::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* FcgiHttpRequest::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string fmt = 5 [default = "json"];
inline bool FcgiHttpRequest::has_fmt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FcgiHttpRequest::set_has_fmt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FcgiHttpRequest::clear_has_fmt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FcgiHttpRequest::clear_fmt() {
  if (fmt_ != &_default_fmt_) {
    fmt_->assign(_default_fmt_);
  }
  clear_has_fmt();
}
inline const ::std::string& FcgiHttpRequest::fmt() const {
  return *fmt_;
}
inline void FcgiHttpRequest::set_fmt(const ::std::string& value) {
  set_has_fmt();
  if (fmt_ == &_default_fmt_) {
    fmt_ = new ::std::string;
  }
  fmt_->assign(value);
}
inline void FcgiHttpRequest::set_fmt(const char* value) {
  set_has_fmt();
  if (fmt_ == &_default_fmt_) {
    fmt_ = new ::std::string;
  }
  fmt_->assign(value);
}
inline void FcgiHttpRequest::set_fmt(const char* value, size_t size) {
  set_has_fmt();
  if (fmt_ == &_default_fmt_) {
    fmt_ = new ::std::string;
  }
  fmt_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FcgiHttpRequest::mutable_fmt() {
  set_has_fmt();
  if (fmt_ == &_default_fmt_) {
    fmt_ = new ::std::string(_default_fmt_);
  }
  return fmt_;
}
inline ::std::string* FcgiHttpRequest::release_fmt() {
  clear_has_fmt();
  if (fmt_ == &_default_fmt_) {
    return NULL;
  } else {
    ::std::string* temp = fmt_;
    fmt_ = const_cast< ::std::string*>(&_default_fmt_);
    return temp;
  }
}

// -------------------------------------------------------------------

// FcgiHttpResponse

// optional int32 result = 1 [default = 0];
inline bool FcgiHttpResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FcgiHttpResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FcgiHttpResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FcgiHttpResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 FcgiHttpResponse::result() const {
  return result_;
}
inline void FcgiHttpResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int64 cal_time = 2 [default = 0];
inline bool FcgiHttpResponse::has_cal_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FcgiHttpResponse::set_has_cal_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FcgiHttpResponse::clear_has_cal_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FcgiHttpResponse::clear_cal_time() {
  cal_time_ = GOOGLE_LONGLONG(0);
  clear_has_cal_time();
}
inline ::google::protobuf::int64 FcgiHttpResponse::cal_time() const {
  return cal_time_;
}
inline void FcgiHttpResponse::set_cal_time(::google::protobuf::int64 value) {
  set_has_cal_time();
  cal_time_ = value;
}

// optional string ip = 3 [default = ""];
inline bool FcgiHttpResponse::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FcgiHttpResponse::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FcgiHttpResponse::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FcgiHttpResponse::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& FcgiHttpResponse::ip() const {
  return *ip_;
}
inline void FcgiHttpResponse::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void FcgiHttpResponse::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void FcgiHttpResponse::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FcgiHttpResponse::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* FcgiHttpResponse::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fcgi_commu

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< fcgi_commu::Op>() {
  return fcgi_commu::Op_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_commun_2eproto__INCLUDED
